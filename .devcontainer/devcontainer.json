{
	// For quick reference: https://containers.dev/implementors/json_reference/
	"name": "UOS Drilling Development Environment v0.2.6",
	"image": "python:3.10.16-slim",
	
	// Volume mounts for persistence and caching
	"mounts": [
		"source=${localEnv:HOME}${localEnv:USERPROFILE}/.gitconfig,target=/home/vscode/.gitconfig,type=bind,consistency=cached",
		// Cache pip downloads - include cache version for invalidation
		"source=pip-cache-${localEnv:CACHE_VERSION:-v1},target=/home/vscode/.cache/pip,type=volume",
		// Cache transformers models
		"source=transformers-cache,target=/home/vscode/.cache/transformers,type=volume",
		// Cache matplotlib config
		"source=matplotlib-cache,target=/home/vscode/.cache/matplotlib,type=volume",
		// Cache PyTorch models
		"source=torch-cache,target=/home/vscode/.cache/torch,type=volume",
		// Docker socket for stress testing (optional)
		"source=/var/run/docker.sock,target=/var/run/docker.sock,type=bind,consistency=cached"
	],
	
	// For faster disk I/O performance
	"workspaceMount": "source=${localWorkspaceFolder},target=/workspaces/${localWorkspaceFolderBasename},type=bind,consistency=cached",

	// Run arguments - keep it simple
	"runArgs": [
		// Performance optimizations
		"--shm-size=2g",
		"--ulimit", "nofile=65536:65536"
	],

	// Resource requirements
	"hostRequirements": {
		"gpu": false,
		"memory": "4gb",
		"cpus": 2
	},

	// Features to add to the Dev Container
	"features": {
		// Common utilities
		"ghcr.io/devcontainers/features/common-utils:2": {
			"installZsh": "true",
			"configureZshAsDefaultShell": "true",
			"installOhMyZsh": "false",
			"installOhMyZshConfig": "false",
			"username": "vscode",
			"userUid": "1000",
			"userGid": "1000",
			"upgradePackages": "true"
		},
		// Git
		"ghcr.io/devcontainers/features/git:1": {
			"version": "os-provided",
			"ppa": "false"
		},
		// Claude Code
		"ghcr.io/anthropics/devcontainer-features/claude-code:1.0.5": {},
		// Docker CLI for stress testing
		"ghcr.io/devcontainers/features/docker-outside-of-docker:1": {
			"version": "latest",
			"moby": false
		}
	},

	// Configure tool-specific properties
	"customizations": {
		"vscode": {
			"settings": {
				"python.defaultInterpreterPath": "/usr/local/bin/python",
				"github.gitAuthentication": true,
				"python.terminal.activateEnvironment": false,
				"python.testing.pytestEnabled": true,
				"python.testing.pytestArgs": [
					"--asyncio-mode=auto"
				],
				"python.analysis.autoImportCompletions": true,
				"python.analysis.extraPaths": [
					"${containerWorkspaceFolder}/abyss/src"
				],
				// Performance settings
				"files.watcherExclude": {
					"**/.git/objects/**": true,
					"**/.git/subtree-cache/**": true,
					"**/node_modules/**": true,
					"**/.cache/**": true
				}
			},
			"extensions": [
				"ms-python.python",
				"ms-python.debugpy",
				"ms-python.vscode-pylance",
				"ms-python.isort",
				"ms-toolsai.jupyter",
				"ms-toolsai.jupyter-keymap",
				"ms-toolsai.vscode-jupyter-cell-tags",
				"ms-toolsai.jupyter-renderers",
				"ms-toolsai.vscode-jupyter-slideshow",
				"ms-toolsai.tensorboard",
				"ms-azuretools.vscode-containers",
				"ms-azuretools.vscode-docker",
				"charliermarsh.ruff"
			]
		}
	},
	
	"remoteUser": "vscode",

	// Setup script that creates the network if needed
	"initializeCommand": [
		"bash", "-c",
		"echo '=== Preparing development environment ===' && docker network create mqtt-broker_toolbox-network 2>/dev/null || echo 'Network already exists or Docker not available'"
	],

	// Install system packages and tools
	"postCreateCommand": [
		"bash", "-c", 
		"apt-get update && apt-get install -y --no-install-recommends build-essential vim-tiny mosquitto-clients htop curl jq netcat-openbsd && rm -rf /var/lib/apt/lists/* && chown -R vscode:vscode /home/vscode/.cache"
	],

	// Install Python dependencies
	"postStartCommand": [
		"bash", "-c", 
		"cd abyss && pip install --user --find-links wheels accelerate==1.2.1 transformers==4.41.0.dev0 tsfm_public==0.2.17 && pip install --user -r requirements.txt && pip install --user -e . && pip install --user aiomqtt aiofiles prometheus-client && git config --global credential.helper 'cache --timeout=3600'"
	],

	// Environment variables for development
	"containerEnv": {
		"PYTHONUNBUFFERED": "1",
		"LOG_LEVEL": "DEBUG",
		"MPLCONFIGDIR": "/home/vscode/.cache/matplotlib",
		"HF_HOME": "/home/vscode/.cache/transformers",
		"TORCH_HOME": "/home/vscode/.cache/torch",
		// MQTT configuration - uses localhost by default, can be overridden
		"MQTT_BROKER_HOST": "${localEnv:MQTT_BROKER_HOST:-localhost}",
		"MQTT_BROKER_PORT": "${localEnv:MQTT_BROKER_PORT:-1883}",
		// Stress testing enabled by default
		"STRESS_TEST_ENABLED": "${localEnv:STRESS_TEST_ENABLED:-true}",
		// Performance
		"PYTHONDONTWRITEBYTECODE": "1",
		"PYTHONIOENCODING": "utf-8"
	},

	// Forward MQTT and monitoring ports
	"forwardPorts": [
		1883,  // MQTT
		9001,  // MQTT WebSocket
		8883,  // MQTT TLS (if configured)
		9090   // Prometheus metrics (for stress testing)
	],

	// Validation and environment check
	"postAttachCommand": [
		"bash", "-c",
		"echo '=== UOS Drilling v0.2.6 Development Environment ===' && echo 'MQTT Configuration:' && echo \"  Host: ${MQTT_BROKER_HOST}:${MQTT_BROKER_PORT}\" && echo \"  Stress Testing: ${STRESS_TEST_ENABLED}\" && echo '' && echo 'Testing MQTT connectivity...' && timeout 2 mosquitto_pub -h ${MQTT_BROKER_HOST} -p ${MQTT_BROKER_PORT} -t test/devcontainer -m 'ping' 2>/dev/null && echo '✓ MQTT broker reachable' || echo '✗ MQTT broker not reachable - app will run in offline mode' && echo '' && echo 'To connect to MQTT broker:' && echo '  1. Run mqtt-multistack/mqtt-broker with docker-compose' && echo '  2. Or set MQTT_BROKER_HOST environment variable' && echo '' && echo 'Ready for development!'"
	]
}