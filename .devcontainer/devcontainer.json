{
	// For quick reference: https://containers.dev/implementors/json_reference/
	"name": "Miniforge3",
	"image": "condaforge/miniforge3:24.3.0-0",
	//"build": {
	//	"context": "..",
	//	"dockerfile": "Dockerfile"
	//},

	// 1. Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": []

	// 2. Use 'mounts' to make a list of local directories available inside the container. More info: https://code.visualstudio.com/remote/advancedcontainers/add-local-file-mount
	// "mounts": [],
		// Configures Docker volume mounts for the devcontainer
	// This section defines file system volumes that will be mounted from the host machine
	// into the container, allowing persistent data and access to host resources
	"mounts": [
		"source=${localEnv:HOME}${localEnv:USERPROFILE}/.gitconfig,target=/home/vscode/.gitconfig,type=bind,consistency=cached",
		// Enable volume mounts for dependency caching
		// Cache pip downloads
		"source=pip-cache,target=/home/vscode/.cache/pip,type=volume",
		// Cache conda/mamba packages
		"source=conda-cache,target=/opt/conda/pkgs,type=volume",
		// Cache npm packages if using JavaScript/Node.js
		"source=node-modules,target=${containerWorkspaceFolder}/node_modules,type=volume"
	],
	

    // For faster disk I/O performance
    "workspaceMount": "source=${localWorkspaceFolder},target=/workspaces/${localWorkspaceFolderBasename},type=bind,consistency=cached",

	// 3. Use 'runArgs' to pass arguments to the container. 
	// run the container with all GPUs
	// "runArgs": [
	// 	"--gpus",
	// 	"all"
	// ],

	"hostRequirements": {
		"gpu": false
	  },

	// 4. Features to add to the Dev Container. More info: https://containers.dev/implementors/features.
	"features": {
		// ZSH without OMZ
		"ghcr.io/devcontainers/features/common-utils:2": {
			"installZsh": "true",
			"configureZshAsDefaultShell": "true",
			"installOhMyZsh": "false",
			"installOhMyZshConfig": "false",
			"username": "vscode",
			"userUid": "1000",
			"userGid": "1000",
			"upgradePackages": "true"
		},
		// git
		"ghcr.io/devcontainers/features/git:1": {
			"version": "os-provided",
			"ppa": "false"
		},
		"ghcr.io/mamba-org/devcontainer-features/micromamba:1": {
			"autoActivate": true,
			"version": "latest",
			"channels": "conda-forge",
			"packages": "",
			"envFile": "",
			"envName": ""
		}
	},

	// 5. Configure tool-specific properties.
	"customizations": {
		// Configure properties specific to VS Code.
		"vscode": {
			// Set *default* container specific settings.json values on container create.
			"settings": {
				"python.defaultInterpreterPath": "/opt/conda/bin/python",
				"github.gitAuthentication": true,  // Credential helper for git
				// Cache conda environments
				"python.condaPath": "/opt/conda/bin/conda",
				"python.terminal.activateEnvironment": true
			},
			// installs useful extensions
			"extensions": [
				"ms-python.python",
				"ms-python.debugpy",
				"ms-python.vscode-pylance",
				"ms-python.isort",
				"ms-toolsai.jupyter",
				"ms-toolsai.jupyter-keymap",
				"ms-toolsai.vscode-jupyter-cell-tags",
				"ms-toolsai.jupyter-renderers",
				"ms-toolsai.vscode-jupyter-slideshow",
				"ms-toolsai.tensorboard",
				"ms-azuretools.vscode-containers",
				"ms-azuretools.vscode-docker",
				"charliermarsh.ruff"
			]
		}
	},
	
	// 6. Set `remoteUser` to `root` to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "vscode",


	
	// the following commands are related to container lifecylce. More info: https://containers.dev/implementors/json_reference/#lifecycle-scripts
	
	// 7. Use 'initializeCommand' to run commands ON THE HOST before container is created or started.
	// "initializeCommand": "",

	// 8. Use 'onCreateCommand' to run commands INSIDE THE CONTAINER after it started for the first time.
	// "onCreateCommand": "",
	
	// 9. Use 'updateContentCommand' to run commands if the root filetree have any changes, during container creation.
	// "updateContentCommand": "",

	// 10. Use 'postCreateCommand' to run commands after the container is created.
	"postCreateCommand": "sudo chown -R vscode:vscode /home/vscode/.cache/pip /opt/conda/pkgs ${containerWorkspaceFolder}/node_modules && pip3 install --user -r abyss/requirements.devcontainer && pip3 install -e abyss/",

	// 11. Use 'postStartCommand' to run a command each time the container starts successfully.
	// "postStartCommand": ""
	
	// 12. Use 'postAttachCommand' to run a command each time a tool attaches to the container successfully. 
	// "postAttachCommand": "",
}