# Use an official Python 3 image as the base image
ARG PYTHON_VERSION=3.10.15
FROM python:${PYTHON_VERSION}-slim

# Prevents Python from writing pyc files.
ENV PYTHONDONTWRITEBYTECODE=1

# Keeps Python from buffering stdout and stderr to avoid situations where
# the application crashes without emitting any logs due to buffering.
ENV PYTHONUNBUFFERED=1

# Install system dependencies for git and build tools
RUN apt-get update && apt-get install -y \
    # git \
    vim \
    build-essential \
    # sudo \
    && rm -rf /var/lib/apt/lists/*

# Create a non-privileged user that the app will run under.
# See https://docs.docker.com/go/dockerfile-user-best-practices/
ARG UID=10001
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    appuser

RUN python -m pip install --upgrade pip

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.cache/pip to speed up subsequent builds.
# Leverage a bind mount to requirements.txt to avoid having to copy them into
# into this layer.
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=bind,source=requirements.txt,target=requirements.txt \
    python -m pip install -r requirements.txt

# Set up the directory structure
WORKDIR /build/abyss
RUN mkdir -p ../deps

# Copy dependencies to ../deps (one level up from where setup.py will be)
COPY abyss/deps/* ../deps/

# Copy the package files
COPY abyss/setup.py abyss/pyproject.toml abyss/README.md abyss/MANIFEST.in ./
COPY abyss/src ./src

# Install the package
RUN python -m pip install .
# Make it editable install because couldn't find a way to copy trained_model into site-packages
# RUN python -m pip install -e .

# Clean up and set up for running
WORKDIR /app
# RUN rm -rf /build

# Now copy only your run script
COPY abyss/run .

#debugging
# RUN python -c "import sys; print(sys.path)"
# RUN pip list | grep abyss
# RUN python -c "import site; print(site.getsitepackages())"
RUN python -c "import abyss; print(abyss.__file__)"

# ENV PYTHONPATH="${PYTHONPATH}:/app/abyss/src"

# Expose the port that the application listens on.
EXPOSE 1883

# Switch to the non-privileged user to run the application.
# USER appuser

# Specify the default command to run the application
CMD ["python", "mqtt-publisher.py"]